<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Fabric Bag Preview</title>
  <style>
    * { box-sizing: border-box; }
    body {
      margin: 0;
      overflow: hidden;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    #container {
      display: flex;
      width: 100vw;
      height: 100vh;
    }

    /* Left Panel - 2D Fabric Positioning */
    #left-panel {
      width: 50%;
      background: #f5f5f5;
      display: flex;
      flex-direction: column;
      border-right: 2px solid #ccc;
    }

    #controls-header {
      background: white;
      padding: 20px;
      border-bottom: 1px solid #ddd;
    }

    #controls-header h2 {
      margin: 0 0 15px 0;
      font-size: 20px;
      color: #333;
    }

    .panel-section {
      margin-bottom: 20px;
    }

    .panel-section h3 {
      margin: 0 0 10px 0;
      font-size: 14px;
      font-weight: 600;
      color: #666;
      text-transform: uppercase;
    }

    .file-input-wrapper {
      display: flex;
      gap: 10px;
      align-items: center;
      margin-bottom: 10px;
    }

    .file-input-wrapper label {
      flex: 1;
      display: block;
      font-size: 13px;
      color: #444;
    }

    .file-input-wrapper input[type="file"] {
      font-size: 12px;
    }

    #generate-btn {
      width: 100%;
      padding: 12px 20px;
      background: #007bff;
      color: white;
      border: none;
      border-radius: 6px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: background 0.2s;
    }

    #generate-btn:hover {
      background: #0056b3;
    }

    #generate-btn:active {
      background: #004085;
    }

    #canvas-container {
      flex: 1;
      position: relative;
      overflow: hidden;
      background: white;
    }

    #fabric-canvas {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      border: 1px solid #ddd;
      cursor: grab;
    }

    #fabric-canvas:active {
      cursor: grabbing;
    }

    .canvas-instructions {
      position: absolute;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(0,0,0,0.7);
      color: white;
      padding: 10px 20px;
      border-radius: 20px;
      font-size: 12px;
      pointer-events: none;
    }

    /* Right Panel - 3D Preview */
    #right-panel {
      width: 50%;
      position: relative;
      background: #f0f0f0;
    }

    #c {
      width: 100%;
      height: 100%;
      display: block;
    }
  </style>
</head>
<body>
  <div id="container">
    <!-- Left Panel: 2D Fabric Positioning -->
    <div id="left-panel">
      <div id="controls-header">
        <h2>Fabric Positioning</h2>

        <div class="panel-section">
          <h3>External Panel (Pattern_25178)</h3>
          <div class="file-input-wrapper">
            <label>Upload Image:</label>
            <input type="file" id="external-img-input" accept="image/*" />
          </div>
        </div>

        <div class="panel-section">
          <h3>Bottom Panel (Pattern_4474)</h3>
          <div class="file-input-wrapper">
            <label>Upload Image:</label>
            <input type="file" id="bottom-img-input" accept="image/*" />
          </div>
        </div>

        <button id="generate-btn">Generate 3D Preview</button>
      </div>

      <div id="canvas-container">
        <canvas id="fabric-canvas"></canvas>
        <div class="canvas-instructions">
          Drag to move • Scroll to zoom
        </div>
      </div>
    </div>

    <!-- Right Panel: 3D Preview -->
    <div id="right-panel">
      <canvas id="c"></canvas>
    </div>
  </div>

  <script type="importmap">
    {
      "imports": {
        "three": "https://cdn.jsdelivr.net/npm/three@0.152.2/build/three.module.js",
        "three/examples/jsm/loaders/OBJLoader.js": "https://cdn.jsdelivr.net/npm/three@0.152.2/examples/jsm/loaders/OBJLoader.js",
        "three/examples/jsm/controls/OrbitControls.js": "https://cdn.jsdelivr.net/npm/three@0.152.2/examples/jsm/controls/OrbitControls.js"
      }
    }
  </script>

  <script type="module">
    import * as THREE from 'three';
    import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';
    import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';

    // ═══════════════════════════════════════════════════════════════
    // CONFIGURATION: Map each OBJ body/group to a texture or material
    // ═══════════════════════════════════════════════════════════════
    //
    // HOW TO USE:
    // 1. Find your body/group name from FeedbagOBJ.obj (e.g., "Pattern_25178")
    // 2. For textures: { type: "texture", image: "filename.png" }
    //    - Use filename only (e.g., "Donut.png") - will use imageBasePath below
    //    - Or use full URL (e.g., "https://example.com/texture.jpg")
    // 3. For solid colors: { type: "color", color: 0xRRGGBB }
    //    - Example: 0xeeeeee (light gray), 0xff0000 (red), 0x000000 (black)
    // 4. Bodies not listed will default to black (0x000000)
    //
    const BODY_MATERIAL_MAP = {
      // Bodies with texture images - specify the image filename or URL
      "Pattern_25178": { type: "texture", image: "Donut.png" },
      "Pattern_4474": { type: "texture", image: "Donut.png" },
      //"Pattern_304806": { type: "texture", image: "Donut.png" },
      
      // Bodies with solid colors - specify hex color (e.g., 0xeeeeee, 0xff0000)
      "Pattern_304806": { type: "color", color: 0xeeeeee },
      "Pattern_157054": { type: "color", color: 0xeeeeee },
      "Pattern_157053": { type: "color", color: 0xeeeeee },
      "Pattern_700495": { type: "color", color: 0xeeeeee },

      // All other bodies not listed above will default to black (0x000000)
      // Add more bodies here as needed:
      // "Pattern_4473": { type: "color", color: 0xff0000 },
      // "Pattern_25185": { type: "texture", image: "MyFabric.png" },
      // "Pattern_25189": { type: "texture", image: "https://example.com/texture.jpg" },
    };

    // Default OBJ file URL or path
    const objURL = 'https://wompatuck-prints.s3.us-west-1.amazonaws.com/render/FeedbagOBJ.obj';

    // Base path for local images (leave empty if using full URLs)
    const imageBasePath = 'https://wompatuck-prints.s3.us-west-1.amazonaws.com/render/';

    // AVAILABLE BODIES IN FeedbagOBJ.obj:
    // Pattern_4473, Pattern_25178, Pattern_25179, Pattern_4474, Pattern_25185,
    // Pattern_25191, Pattern_304806, Pattern_700495, Pattern_25189, Pattern_25192,
    // Pattern_157053, Pattern_157054, Pattern_453128, Pattern_453129, Pattern_453130,
    // Pattern_453132, Pattern_453134, Pattern_453135, Pattern_453131, pHelix1 group1,
    // Topstitch_740533, Topstitch_740535, Topstitch_740337, Topstitch_740339,
    // Topstitch_751414, Topstitch_752179, Topstitch_742399, Topstitch_742782,
    // Topstitch_89825, Topstitch_97308, Topstitch_89908, Topstitch_97311
    // ═══════════════════════════════════════════════════════════════

    // ═══════════════════════════════════════════════════════════════
    // 2D FABRIC POSITIONING CANVAS
    // ═══════════════════════════════════════════════════════════════
    const fabricCanvas = document.getElementById('fabric-canvas');
    const fabricCtx = fabricCanvas.getContext('2d');

    // State for the two fabric panels
    const fabricPanels = {
      external: {
        image: null,
        x: 0,
        y: 0,
        scale: 1,
        svgPath: 'ExternalPanel.svg',
        svgWidth: 1440,
        svgHeight: 720,
        clipPath: null,
        active: true
      },
      bottom: {
        image: null,
        x: 0,
        y: 0,
        scale: 1,
        svgPath: 'BottomOutline.svg',
        svgWidth: 720,
        svgHeight: 720,
        clipPath: null,
        active: false
      }
    };

    let currentPanel = 'external'; // Which panel is currently being edited
    let isDragging = false;
    let dragStartX = 0;
    let dragStartY = 0;
    let lastX = 0;
    let lastY = 0;

    // Initialize 2D canvas
    function init2DCanvas() {
      // Set canvas size based on the active panel
      const panel = fabricPanels[currentPanel];
      fabricCanvas.width = panel.svgWidth;
      fabricCanvas.height = panel.svgHeight;

      // Load SVG clip paths
      loadSVGClipPath('external');
      loadSVGClipPath('bottom');

      // Setup event listeners
      document.getElementById('external-img-input').addEventListener('change', (e) => handleFabricImageUpload(e, 'external'));
      document.getElementById('bottom-img-input').addEventListener('change', (e) => handleFabricImageUpload(e, 'bottom'));
      document.getElementById('generate-btn').addEventListener('click', generatePreview);

      fabricCanvas.addEventListener('mousedown', onCanvasMouseDown);
      fabricCanvas.addEventListener('mousemove', onCanvasMouseMove);
      fabricCanvas.addEventListener('mouseup', onCanvasMouseUp);
      fabricCanvas.addEventListener('mouseleave', onCanvasMouseUp);
      fabricCanvas.addEventListener('wheel', onCanvasWheel, { passive: false });

      render2DCanvas();
    }

    function loadSVGClipPath(panelName) {
      const panel = fabricPanels[panelName];
      const img = new Image();
      img.onload = () => {
        panel.clipPath = img;
        render2DCanvas();
      };
      img.src = panel.svgPath;
    }

    function handleFabricImageUpload(event, panelName) {
      const file = event.target.files[0];
      if (!file) return;

      const reader = new FileReader();
      reader.onload = (e) => {
        const img = new Image();
        img.onload = () => {
          fabricPanels[panelName].image = img;
          fabricPanels[panelName].x = 0;
          fabricPanels[panelName].y = 0;
          fabricPanels[panelName].scale = 1;
          fabricPanels[panelName].active = true;

          // Switch to this panel for editing
          currentPanel = panelName;
          const panel = fabricPanels[currentPanel];
          fabricCanvas.width = panel.svgWidth;
          fabricCanvas.height = panel.svgHeight;

          render2DCanvas();
        };
        img.src = e.target.result;
      };
      reader.readAsDataURL(file);
    }

    function onCanvasMouseDown(e) {
      const panel = fabricPanels[currentPanel];
      if (!panel.image) return;

      isDragging = true;
      const rect = fabricCanvas.getBoundingClientRect();
      dragStartX = e.clientX - rect.left;
      dragStartY = e.clientY - rect.top;
      lastX = panel.x;
      lastY = panel.y;
    }

    function onCanvasMouseMove(e) {
      if (!isDragging) return;

      const rect = fabricCanvas.getBoundingClientRect();
      const currentX = e.clientX - rect.left;
      const currentY = e.clientY - rect.top;

      const panel = fabricPanels[currentPanel];
      panel.x = lastX + (currentX - dragStartX);
      panel.y = lastY + (currentY - dragStartY);

      render2DCanvas();
    }

    function onCanvasMouseUp() {
      isDragging = false;
    }

    function onCanvasWheel(e) {
      e.preventDefault();

      const panel = fabricPanels[currentPanel];
      if (!panel.image) return;

      const delta = e.deltaY > 0 ? 0.9 : 1.1;
      const newScale = Math.max(0.1, Math.min(5, panel.scale * delta));

      // Zoom towards mouse position
      const rect = fabricCanvas.getBoundingClientRect();
      const mouseX = e.clientX - rect.left;
      const mouseY = e.clientY - rect.top;

      const scaleChange = newScale / panel.scale;
      panel.x = mouseX - (mouseX - panel.x) * scaleChange;
      panel.y = mouseY - (mouseY - panel.y) * scaleChange;
      panel.scale = newScale;

      render2DCanvas();
    }

    function render2DCanvas() {
      const panel = fabricPanels[currentPanel];

      fabricCtx.clearRect(0, 0, fabricCanvas.width, fabricCanvas.height);

      // Draw checkerboard background
      drawCheckerboard(fabricCtx, fabricCanvas.width, fabricCanvas.height);

      if (panel.image) {
        fabricCtx.save();

        // Draw the image
        const imgWidth = panel.image.width * panel.scale;
        const imgHeight = panel.image.height * panel.scale;
        fabricCtx.drawImage(panel.image, panel.x, panel.y, imgWidth, imgHeight);

        fabricCtx.restore();
      }

      // Draw the SVG clip path outline on top
      if (panel.clipPath) {
        fabricCtx.save();
        fabricCtx.globalAlpha = 0.8;
        fabricCtx.drawImage(panel.clipPath, 0, 0, panel.svgWidth, panel.svgHeight);
        fabricCtx.restore();
      }
    }

    function drawCheckerboard(ctx, width, height) {
      const squareSize = 20;
      ctx.fillStyle = '#ffffff';
      ctx.fillRect(0, 0, width, height);

      ctx.fillStyle = '#e0e0e0';
      for (let y = 0; y < height; y += squareSize) {
        for (let x = 0; x < width; x += squareSize) {
          if ((x / squareSize + y / squareSize) % 2 === 0) {
            ctx.fillRect(x, y, squareSize, squareSize);
          }
        }
      }
    }

    // Generate textures from the positioned images
    async function generateFabricTextures() {
      const textures = {};

      for (const [panelName, panel] of Object.entries(fabricPanels)) {
        if (!panel.image || !panel.clipPath) continue;

        // Create an offscreen canvas for this panel
        const offCanvas = document.createElement('canvas');
        offCanvas.width = panel.svgWidth;
        offCanvas.height = panel.svgHeight;
        const offCtx = offCanvas.getContext('2d');

        // Draw the positioned image
        const imgWidth = panel.image.width * panel.scale;
        const imgHeight = panel.image.height * panel.scale;
        offCtx.drawImage(panel.image, panel.x, panel.y, imgWidth, imgHeight);

        // Apply the SVG mask
        offCtx.globalCompositeOperation = 'destination-in';
        offCtx.drawImage(panel.clipPath, 0, 0, panel.svgWidth, panel.svgHeight);

        // Convert to texture
        textures[panelName] = offCanvas.toDataURL('image/png');
      }

      return textures;
    }

    // ═══════════════════════════════════════════════════════════════
    // 3D MODEL RENDERING
    // ═══════════════════════════════════════════════════════════════
    let camera, scene, renderer, controls;
    let objMesh = null;
    let defaultTexture = null;
    let currentModel = null; // Store reference to current 3D model

    init2DCanvas();
    init3D();
    loadModelWithDefaultTexture();

    function init3D() {
      const canvas = document.getElementById('c');

      const rightPanel = document.getElementById('right-panel');
      renderer = new THREE.WebGLRenderer({ canvas, antialias: true });
      renderer.setSize(rightPanel.clientWidth, rightPanel.clientHeight);

      scene = new THREE.Scene();
      scene.background = new THREE.Color(0xf0f0f0);

      camera = new THREE.PerspectiveCamera(45, rightPanel.clientWidth / rightPanel.clientHeight, 0.1, 1000);
      camera.position.set(0, 0, 5);

      controls = new OrbitControls(camera, renderer.domElement);
      controls.enableDamping = true;
      controls.dampingFactor = 0.05;

      scene.add(new THREE.AmbientLight(0x404040));
      const dirLight = new THREE.DirectionalLight(0xffffff, 1);
      dirLight.position.set(5, 10, 7);
      scene.add(dirLight);

      window.addEventListener('resize', () => {
        const rightPanel = document.getElementById('right-panel');
        camera.aspect = rightPanel.clientWidth / rightPanel.clientHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(rightPanel.clientWidth, rightPanel.clientHeight);
      });

      animate3D();
    }

    function loadModelWithDefaultTexture() {
        const loader = new OBJLoader();
        const texLoader = new THREE.TextureLoader();

        // Pre-load all unique textures
        const textureCache = {};
        const texturesToLoad = new Set();

        Object.values(BODY_MATERIAL_MAP).forEach(config => {
          if (config.type === "texture" && config.image) {
            texturesToLoad.add(config.image);
          }
        });

        const texturePromises = Array.from(texturesToLoad).map(imageName => {
          return new Promise((resolve, reject) => {
            const imageUrl = imageName.startsWith('http') ? imageName : imageBasePath + imageName;
            texLoader.load(
              imageUrl,
              texture => {
                texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
                texture.repeat.set(1, 1);
                texture.flipY = true;
                textureCache[imageName] = texture;
                resolve();
              },
              undefined,
              error => {
                console.error(`Failed to load texture: ${imageName}`, error);
                resolve(); // Continue even if texture fails
              }
            );
          });
        });

        Promise.all(texturePromises).then(() => {
          loader.load(objURL, obj => {
            obj.traverse(child => {
              if (child.isMesh) {
                const config = BODY_MATERIAL_MAP[child.name];

                if (config) {
                  if (config.type === "texture" && config.image) {
                    // Apply the texture for this body
                    const texture = textureCache[config.image];
                    if (texture) {
                      child.material = new THREE.MeshStandardMaterial({ map: texture });
                    } else {
                      // Fallback if texture failed to load
                      child.material = new THREE.MeshStandardMaterial({ color: 0x808080 });
                    }
                  } else if (config.type === "color") {
                    // Apply the specified color
                    child.material = new THREE.MeshStandardMaterial({ color: config.color });
                  }
                } else {
                  // Default to black for unlisted bodies
                  child.material = new THREE.MeshStandardMaterial({ color: 0x000000 });
                }
              }
            });

         // Center camera on model
          const bbox = new THREE.Box3().setFromObject(obj);
          const center = bbox.getCenter(new THREE.Vector3());
          const size = bbox.getSize(new THREE.Vector3());
          const maxDim = Math.max(size.x, size.y, size.z);
          const fitDist = maxDim * 1.5;

          camera.position.set(center.x, center.y, center.z + fitDist);
          camera.lookAt(center);
          controls.target.copy(center);
          controls.update();

            // ✅ Add to scene etc.
            scene.add(obj);
          });
        });

      // const loader = new OBJLoader();
      // const texLoader = new THREE.TextureLoader();

      // texLoader.load(textureURL, texture => {
      //   defaultTexture = texture;
      //   texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
      //   texture.repeat.set(1, 1);
      //   texture.flipY = false;

      //   loader.load(objURL, obj => {
      //     const targetParts = ["Pattern_25179", "Pattern_25178"];

      //     obj.traverse(child => {
      //       console.log('Part:', child.name);
      //       if (child.isMesh) {
      //         if (targetParts.includes(child.name)) {
      //           child.material = new THREE.MeshStandardMaterial({ map: fabricTexture });
      //         } else {
      //           child.material = new THREE.MeshStandardMaterial({ color: 0xeeeeee });
      //         }
      //       }
      //     });

          

      //     // Center camera on model
      //     const bbox = new THREE.Box3().setFromObject(obj);
      //     const center = bbox.getCenter(new THREE.Vector3());
      //     const size = bbox.getSize(new THREE.Vector3());
      //     const maxDim = Math.max(size.x, size.y, size.z);
      //     const fitDist = maxDim * 1.5;

      //     camera.position.set(center.x, center.y, center.z + fitDist);
      //     camera.lookAt(center);
      //     controls.target.copy(center);
      //     controls.update();

      //     scene.add(obj);
      //   });
      // });

      
    }

    // Generate 3D Preview with positioned fabric textures
    async function generatePreview() {
      console.log("Generating 3D Preview...");
      //if (!file || !objMesh) return;

      // const url = URL.createObjectURL(file);
      // const loader = new THREE.TextureLoader();

      // loader.load(url, texture => {
      //   texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
      //   texture.repeat.set(1, 1);
      //   texture.flipY = false;

      //   objMesh.material.map = texture;
      //   objMesh.material.needsUpdate = true;


        
      // });
        
        // Clear the current scene
        while(scene.children.length > 0) {
          scene.remove(scene.children[0]);
        }

        // Re-add lights
        scene.add(new THREE.AmbientLight(0x404040));
        const dirLight = new THREE.DirectionalLight(0xffffff, 1);
        dirLight.position.set(5, 10, 7);
        scene.add(dirLight);

        const loader = new OBJLoader();
        const url = URL.createObjectURL(file);
        console.log("Loading uploaded texture: " + url);
        const texLoader = new THREE.TextureLoader();

        // Load the uploaded texture
        texLoader.load(url, uploadedTexture => {
          uploadedTexture.wrapS = uploadedTexture.wrapT = THREE.RepeatWrapping;
          uploadedTexture.repeat.set(1, 1);
          uploadedTexture.flipY = true;

          // Also load any other textures that are in the config
          const textureCache = { 'UPLOADED': uploadedTexture };
          const texturesToLoad = new Set();

          Object.values(BODY_MATERIAL_MAP).forEach(config => {
            if (config.type === "texture" && config.image) {
              texturesToLoad.add(config.image);
            }
          });

          const texturePromises = Array.from(texturesToLoad).map(imageName => {
            return new Promise((resolve) => {
              const imageUrl = imageName.startsWith('http') ? imageName : imageBasePath + imageName;
              texLoader.load(
                imageUrl,
                texture => {
                  texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
                  texture.repeat.set(1, 1);
                  texture.flipY = true;
                  textureCache[imageName] = texture;
                  resolve();
                },
                undefined,
                error => {
                  console.error(`Failed to load texture: ${imageName}`, error);
                  resolve();
                }
              );
            });
          });

          Promise.all(texturePromises).then(() => {
            loader.load(objURL, obj => {
              obj.traverse(child => {
                if (child.isMesh) {
                  const config = BODY_MATERIAL_MAP[child.name];

                  if (config) {
                    if (config.type === "texture") {
                      // Use the texture specified in config
                      const texture = config.image ? textureCache[config.image] : null;
                      if (texture) {
                        child.material = new THREE.MeshStandardMaterial({ map: texture });
                      } else {
                        child.material = new THREE.MeshStandardMaterial({ color: 0x808080 });
                      }
                    } else if (config.type === "color") {
                      child.material = new THREE.MeshStandardMaterial({ color: config.color });
                    }
                  } else {
                    child.material = new THREE.MeshStandardMaterial({ color: 0x000000 });
                  }
                }
              });

         // Center camera on model
          const bbox = new THREE.Box3().setFromObject(obj);
          const center = bbox.getCenter(new THREE.Vector3());
          const size = bbox.getSize(new THREE.Vector3());
          const maxDim = Math.max(size.x, size.y, size.z);
          const fitDist = maxDim * 1.5;

          camera.position.set(center.x, center.y, center.z + fitDist);
          camera.lookAt(center);
          controls.target.copy(center);
          controls.update();

            // ✅ Add to scene etc.
            scene.add(obj);
            });
          });
        });

    }

    function animate() {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    }
  </script>
</body>
</html>
